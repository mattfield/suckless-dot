#!/bin/mksh
# vim:ft=sh
# $HOME/etc/mkshrc
# if not run interactive, exit
[[ $- != *i* ]] && return

# some mksh specific stuff
# echo is better. read the fucking manual
alias echo='builtin print'
unalias r
. $HOME/etc/aliases
set -o nohup bgnice trackall
alias !!='\\builtin fc -e -'

# dont freeze the shell when C-s is pressed
stty -ixon

cd() {
    if [ $# -eq 0 ] ; then
        builtin cd ${HOME}
    else
        builtin cd "$@" ||
        builtin cd "$@"* ||
        builtin cd *"$@" ||
        builtin cd *"$@"* ||
        for i in 0 1 2 3 4 5 6 7 8 ; do
            builtin cd "$(find . -maxdepth $(($i + 1)) -mindepth $i -type d -iname "*$@*" | head -n 1)" &&
                break
        done
    fi 2> /dev/null
}

# history
HISTFILE="$HOME/var/cache/mksh_history"
# if this set to a really large number, mksh might not start at all. refer the
# manual to know more
HISTSIZE=100000

# vi mode
set -o emacs

# check the current git branch
_branch() {
    local branch="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/')"
    local branch_status=0

    # branch_status=0 => unmodified
    # branch_status=1 => modified
    # branch_status=2 => the local repo is ahead

    [ -z $branch ] && return

    case "$(git status -uno 2> /dev/null)" in
        *"Changes to be committed"* | *"not staged"*)
        branch_status=1;;
        *"ahead of"*)
        branch_status=2;;
        *"up to date"*)
        branch_status=0;;
    esac

    case $branch_status in
    0) echo -n "$branch";;
    1) echo -n "${branch}+";;
    2) echo -n "${branch}^";;
    esac
}

# set the terminal's window terminal to the current working dir
_set_wn() {
    if [ "$TERM" != "linux" ]; then
        local cwd="${PWD/$HOME/\~}"
        echo -ne "\033]0;mksh: $cwd\a" 2> /dev/null
    fi
}

# delete Desktop folder
_rm_desktop() {
    [ -d $XDG_DESKTOP_HOME ] && rm -rf $XDG_DESKTOP_HOME
    [ -d $HOME/Desktop ] && rm -rf $HOME/Desktop
    [ -d $HOME/Downloads ] &&
        [ -z "$(ls $HOME/Downloads)" ] && rm -rf $HOME/Downloads
    # im not sure if this is safe but hey, I hate them
    [ -d $HOME/.dbus ] && rm -rf $HOME/.dbus
    [ -d $HOME/.pki ] && rm -rf $HOME/.pki
} > /dev/null

_PS1_details() {
#    RET=$?
    echo -ne "$(tput setaf 6)$(_branch)$(tput sgr 0)"

#    exit_code() {
#        [ $RET -ne 0 ] && echo ':('
#    }
#
#    rprompt() {
#        printf "%*s" $COLUMNS "$(tput setaf 1)$(exit_code)$(tput sgr 0)"
#    }
#
#    echo -ne "$(tput sc; rprompt; tput rc)"
}

_PS1_command() {
    echo -ne "$(_set_wn)$(_rm_desktop)"
}

_get_cwd() {
    echo -ne "${PWD/$HOME/\~}"
}

# prompts
PS2='... '
# single quotes are used to expand the function's echo statement
# mksh cannot do colors in prompt like bash does so functions has been used
#export PS1=']$(_PS1_details)$(_PS1_command) '
export PS1='\$$(_PS1_details)$(_PS1_command) '

# console stuff
#if [ "$TERM" = "linux" ]; then
#    [ -f $HOME/var/fonts/terminus-font-4.46/ter-v12n.psf ] &&
#        setfont $HOME/var/fonts/terminus-font-4.46/ter-v12n.psf
#
#    [ -f $HOME/var/cache/tm/colors/colors_tty.sh ] &&
#        source $HOME/var/cache/tm/colors/colors_tty.sh 2> /dev/null
#    clear
#    [ $(sudo $HOME/bin/brness -g 2> /dev/null) -gt 10 ] && brness -s 10% 2> /dev/null
#fi

